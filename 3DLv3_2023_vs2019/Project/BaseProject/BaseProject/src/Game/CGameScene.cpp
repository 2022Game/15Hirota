#include "CGameScene.h"
#include "CSceneManager.h"
#include "CTaskManager.h"
#include "CGameOverScene.h"
#include "CClearScene.h"
#include "CField.h"
#include "CStageSelection.h"
#include "CCamera.h"
#include "CUIBase.h"
#include "CInput.h"
#include "CStageManager.h"
#include "CGameManager.h"
#include "CPlayer.h"
#include "CSoldier.h"
#include "CSignboard.h"
#include "CGameCamera.h"
#include "CGameMenu.h"
#include "CEnemyManager.h"
#include "CRisingObject.h"
#include "CStage1.h"
#include "CSound.h"
#include "CBGMManager.h"
#include "CJumpingObject.h"
#include "CInventoryMenu.h"
#include "CStageTime.h"
#include "CScore.h"
#include "CVanguard.h"
#include "CBlueMedal.h"
#include "CScreenItem.h"
#include "CResult.h"
#include "CResultAnnouncement.h"
#include "CMeat1.h"

//コンストラクタ
CGameScene::CGameScene()
	: CSceneBase(EScene::eGame)
	, mpGameMenu(nullptr)
	, mpTime(nullptr)
	, mpScore(nullptr)
	, mpResultUI(nullptr)
	//, mpInventoryMenu(nullptr)
{

}

//デストラクタ
CGameScene::~CGameScene()
{

}

//シーン読み込み
void CGameScene::Load()
{
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//ここでゲーム中に必要な
	//リソースの読み込みやクラスの生成を行う

	// フィールド関連
	//CResourceManager::Load<CModel>("FieldCylinder",			 "Field\\Object\\cylinder.obj");					// 初期の回転する四角モデル
	//CResourceManager::Load<CModel>("HatenaBlock",			 "Field\\Object\\hatena.obj");						// ハテナブロック(アイテム保有)
	//CResourceManager::Load<CModel>("HatenaBlockAfter",		 "Field\\Object\\UsedHatenaBlock.obj");				// ハテナブロック(アイテム不保有)
	//CResourceManager::Load<CModel>("RengaBlock",			 "Field\\Object\\RengaBlock.obj");					// レンガブロック


	// キャラクター関連
	CResourceManager::Load<CModelX>("Player",				"Character\\Monster1\\Monster_1.x");						// プレイヤー
	//CResourceManager::Load<CModelX>("Soldier",				"Character\\Gas mask soldier\\GasMask_Soldier_Model.x");	// ソルジャー
	////CResourceManager::Load<CModelX>("UnityChan",			"Character\\UnityChan\\unitychan.x");						// ユニティちゃん
	////CResourceManager::Load<CModelX>("Yukari",				"Character\\Yukari\\Yukari_Model.x");						// ゆかりさん


	// アイテム関連
	//CResourceManager::Load<CModel>("Bullet",				"Item\\Bullet1\\Bullet.obj");				// 弾
	//CResourceManager::Load<CModel>("Gun_M1G",				"Item\\Gun_M1Garand\\Gun_M1Garand.obj");	// M1ガーランド(銃)
	CResourceManager::Load<CModel>("MajicSword",			"Item\\MajicSword\\MajicSword.obj");		// 魔法剣
	CResourceManager::Load<CModel>("MajicSwordVan",			"Item\\MajicSword\\MajicSword(Van).obj");	// 魔法剣ヴァンガード
	//CResourceManager::Load<CModel>("Heart",					"Item\\StatusItem\\Heart.obj");				// 回復オブジェクト
	//CResourceManager::Load<CModel>("Star",					"Item\\StatusItem\\Star.obj");				// 無敵オブジェクト
	//CResourceManager::Load<CModel>("Medal",					"Item\\StatusItem\\Medal.obj");				// 得点オブジェクト
	//CResourceManager::Load<CModel>("Healing",				"Item\\StatusItem\\HealingItem.obj");		// 回復薬オブジェクト


	// UI関連
	CResourceManager::Load<CTexture>("PFrame",				"UI\\Image_Gauge_Frame.png");		// プレイヤーのフレーム
	CResourceManager::Load<CTexture>("PBarImage",			"UI\\WhiteUI.png");					// プレイヤーのバー
	CResourceManager::Load<CTexture>("PStamina",			"UI\\Sutamina.png");				// プレイヤーのスタミナ
	CResourceManager::Load<CTexture>("SFrame",				"UI\\Image_Gauge_Frame.png");		// ソルジャーのフレーム
	CResourceManager::Load<CTexture>("SBar",				"UI\\Gauge.png");					// ソルジャーのバー
	CResourceManager::Load<CTexture>("YFrame",				"UI\\Image_Gauge_Frame.png");		// ゆかりさんのフレーム
	CResourceManager::Load<CTexture>("YBar",				"UI\\Gauge.png");					// ゆかりさんのバー
	CResourceManager::Load<CTexture>("SignboardUI",			"UI\\Ukye_1.png");					// Uキーの画像
	CResourceManager::Load<CTexture>("ExclamationMark",		"UI\\bikkurimark.png");				// ビックリマーク画像
	CResourceManager::Load<CTexture>("Timer",				"UI\\StageUI\\Timer.png");			// タイマー画像
	// Eキーの画像
	CResourceManager::Load<CTexture>("EUI", "UI\\GimmickUI\\E.png");

	// アイテムUI関連
	//CResourceManager::Load<CTexture>("InvincibleUI",		"UI\\Item\\Invincible Item.png");			// 無敵アイテム用のUI
	//CResourceManager::Load<CTexture>("AttackUpUI",			"UI\\Item\\Increase Attack Power.png");		// 攻撃力アップアイテム用のUI
	//CResourceManager::Load<CTexture>("HealthUI",			"UI\\Item\\Health Recovery Items.png");		// 防御力アップアイテム用のUI
	//CResourceManager::Load<CTexture>("No ItemUI",			"UI\\Item\\NoItemUI.png");					// アイテム無し用のUI

	// BGM・SE関連
	// 剣　スラッシュ
	CResourceManager::Load<CSound>("SlashSound", "Sound\\SE\\slash.wav");
	// 8bitの回復音
	CResourceManager::Load<CSound>("8bitKaifuku", "Sound\\SE\\8bitkaifuku.wav");
	// 8bitの銃の音(ブロック用に使う)
	CResourceManager::Load<CSound>("8bitShot", "Sound\\SE\\8bitshot.wav");
	// 8bitの回復音(無敵用に使う)
	CResourceManager::Load<CSound>("8bitMutekiTime", "Sound\\SE\\8bitMuteki.wav");
	// クリーチャーの唸り声1
	CResourceManager::Load<CSound>("CreatureGrowl1", "Sound\\VOICE\\CreatureStereo5.wav");

	// ゲーム内のBGM
	CBGMManager::Instance()->Play(EBGMType::eGame);


	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	//// フィールド
	//CStageSelection* field = new CStageSelection();

	// モンスター(プレイヤー)
	CPlayer* player = new CPlayer();

	new CGameCamera
	(
		CVector(0.0f, 0.0f, 0.0f),
		CVector(0.0f, 0.0f, 0.0f)
	);

	//CCamera* mainCamera = new CCamera
	//(
	//	CVector(0.0f, 80.0f, 45.0f),
	//	player->Position() + CVector(0.0f, 10.0f, 0.0f)
	//);
	//mainCamera->SetFollowTargetTf(player);
	//// スフィアかメッシュぐらい
	//mainCamera->AddCollider(field->GetWallCol());

	// ゲームメニューを作成
	mpGameMenu = new CGameMenu();
	// 時間
	mpTime = new CStageTime();
	// スコア
	mpScore = new CScore();

	mpResultUI = new CResultAnnouncement();

	// リザルト
	/*mpResult = new CResult();
	mpResult->SetTimeAndScore(mpTime, mpScore);*/

	// インベントリを作成
	//mpInventoryMenu = new CInventoryMenu();
	//mpInventoryMenu->SetPlayer(player);
	
	CGameManager::GameStart();
}

//シーンの更新処理
void CGameScene::Update()
{
	/*CResultAnnouncement* resut = CResultAnnouncement::Instance();
	bool resultend = resut->IsResultOpened();
	bool opened = resut->IsOpened();
	CDebugPrint::Print("result:%s\n", resultend ? "true" : "false");
	CDebugPrint::Print("opned:%s\n", opened ? "true" : "false");*/

	/*CResult* result = CResult::Instance();
	int score = result->GetTotalScore();
	CDebugPrint::Print("total: %d\n", score);*/

	// ゲーム画面はカーソル非表示
	CInput::ShowCursor(false);
	if (CInput::PushKey('H'))
	{
		CSceneManager::Instance()->LoadScene(EScene::eTitle);
	}

	// ゲームメニューを開いてなければ、[Ｍ]キーでメニューを開く
	if (!mpGameMenu->IsOpened())
	{
		if (CInput::PushKey('M'))
		{
			mpGameMenu->Open();
		}
	}

	// ゲームのステータスがeResultだったら
	// リザルト表示
	// (他にやり方があるかも)
	if (CGameManager::GameState() == EGameState::eResult)
	{
		// カーソルをオンにする
		CInput::ShowCursor(true);
		// リザルトメニューを開いていなかったら
		if (!mpResultUI->IsOpened())
		{
			// 開く
			mpResultUI->Open();
			mpResultUI->Update();
		}
		// リザルトメニューを開いていたら
		else
		{
			// リザルト画面終了フラグがオンだったら
			if (mpResultUI->IsEnd())
			{
				// ゲーム開始ならば、ゲームシーンを読み込む
				if (mpResultUI->IsStartGame())
				{
					// メニューを閉じる
					mpResultUI->Close();
					CGameManager::GameRestart();
				}
				// ゲーム終了ならば、アプリを閉じる
				else if (mpResultUI->IsExitGame())
				{
					System::ExitGame();
				}
			}
		}
	}
	// 更新
	mpResultUI->Update();

	////////////////////////////////////////////////////////////////////////////////////

	// ステージの更新
	CStageManager::Update();

	if (CInput::PushKey('L'))
	{
		CSceneManager::Instance()->LoadScene(EScene::eStuffedRoll);
	}

	int stage = CGameManager::StageNo();
	printf("StageNo:%d\n", stage);

	// ステージ番号の監視
	//CDebugPrint::Print("StageNo:%d\n", CGameManager::StageNo());
}